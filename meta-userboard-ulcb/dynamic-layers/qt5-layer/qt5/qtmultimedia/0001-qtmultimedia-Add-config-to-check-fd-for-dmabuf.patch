From 1847521ab8a81ac5a4bf8092591290504d512229 Mon Sep 17 00:00:00 2001
From: Huynh Thanh Hung <hung.huynh.wz@rvc.renesas.com>
Date: Mon, 21 Jan 2019 15:23:40 +0700
Subject: [PATCH 1/3] qtmultimedia: Add config to check fd for dmabuf

Add more contruction and function to check if buffer is dmabuf.

Signed-off-by: Huynh Thanh Hung <hung.huynh.wz@rvc.renesas.com>
---
 src/gsttools/gsttools.pro              |  2 ++
 src/gsttools/qgstvideorenderersink.cpp | 17 ++++++++++++++++-
 src/multimedia/video/qvideoframe.cpp   | 37 ++++++++++++++++++++++-------
 src/multimedia/video/qvideoframe.h     |  3 +++
 4 files changed, 51 insertions(+), 8 deletions(-)

diff --git a/src/gsttools/gsttools.pro b/src/gsttools/gsttools.pro
index a5c1d94..dee1cbf 100644
--- a/src/gsttools/gsttools.pro
+++ b/src/gsttools/gsttools.pro
@@ -140,3 +140,5 @@ DESTDIR = $$QT.multimedia.libs
 target.path = $$[QT_INSTALL_LIBS]

 INSTALLS += target
+
+LIBS_PRIVATE += -lgstallocators-$$GST_VERSION
diff --git a/src/gsttools/qgstvideorenderersink.cpp b/src/gsttools/qgstvideorenderersink.cpp
index 51f511d..43e2bf6 100644
--- a/src/gsttools/qgstvideorenderersink.cpp
+++ b/src/gsttools/qgstvideorenderersink.cpp
@@ -45,6 +45,7 @@
 #include "qgstvideorenderersink_p.h"

 #include <gst/video/video.h>
+#include <gst/allocators/allocators.h>

 #include "qgstutils_p.h"

@@ -83,11 +84,25 @@ void QGstDefaultVideoRenderer::stop(QAbstractVideoSurface *surface)

 bool QGstDefaultVideoRenderer::present(QAbstractVideoSurface *surface, GstBuffer *buffer)
 {
+    int fd;
+    GstMemory *mem;
+
+    mem = gst_buffer_get_memory(buffer,0);
+
+    if (gst_is_dmabuf_memory(mem)){
+        fd = gst_dmabuf_memory_get_fd(mem);
+    }
+    else {
+        fd = -1;
+    }
+    gst_memory_unref(mem);
+
     m_flushed = false;
     QVideoFrame frame(
                 new QGstVideoBuffer(buffer, m_videoInfo),
                 m_format.frameSize(),
-                m_format.pixelFormat());
+                m_format.pixelFormat(),
+                fd);
     QGstUtils::setFrameTimeStamps(&frame, buffer);

     return surface->present(frame);
diff --git a/src/multimedia/video/qvideoframe.cpp b/src/multimedia/video/qvideoframe.cpp
index f049557..b56b571 100644
--- a/src/multimedia/video/qvideoframe.cpp
+++ b/src/multimedia/video/qvideoframe.cpp
@@ -297,7 +297,7 @@ private:
     Constructs a null video frame.
 */
 QVideoFrame::QVideoFrame()
-    : d(new QVideoFramePrivate)
+    : d(new QVideoFramePrivate), buf_fd(0)
 {
 }

@@ -308,11 +308,25 @@ QVideoFrame::QVideoFrame()
 */
 QVideoFrame::QVideoFrame(
         QAbstractVideoBuffer *buffer, const QSize &size, PixelFormat format)
+    : d(new QVideoFramePrivate(size, format)),buf_fd(0)
+{
+    d->buffer = buffer;
+}
+
+/*!
+    Constructs a video frame from a \a buffer with the given pixel \a format and \a size in pixels,
+    include with fd for dma_buf.
+    \note This doesn't increment the reference count of the video buffer.
+*/
+QVideoFrame::QVideoFrame(
+        QAbstractVideoBuffer *buffer, const QSize &size, PixelFormat format, int fd)
     : d(new QVideoFramePrivate(size, format))
 {
     d->buffer = buffer;
+    buf_fd = fd;
 }

+
 /*!
     Constructs a video frame of the given pixel \a format and \a size in pixels.

@@ -320,7 +334,7 @@ QVideoFrame::QVideoFrame(
     number of bytes that must be allocated for the frame.
 */
 QVideoFrame::QVideoFrame(int bytes, const QSize &size, int bytesPerLine, PixelFormat format)
-    : d(new QVideoFramePrivate(size, format))
+    : d(new QVideoFramePrivate(size, format)), buf_fd(0)
 {
     if (bytes > 0) {
         QByteArray data;
@@ -342,7 +356,7 @@ QVideoFrame::QVideoFrame(int bytes, const QSize &size, int bytesPerLine, PixelFo
 */
 QVideoFrame::QVideoFrame(const QImage &image)
     : d(new QVideoFramePrivate(
-            image.size(), pixelFormatFromImageFormat(image.format())))
+            image.size(), pixelFormatFromImageFormat(image.format()))), buf_fd(0)
 {
     if (d->pixelFormat != Format_Invalid)
         d->buffer = new QImageVideoBuffer(image);
@@ -354,7 +368,7 @@ QVideoFrame::QVideoFrame(const QImage &image)

 */
 QVideoFrame::QVideoFrame(const QVideoFrame &other)
-    : d(other.d)
+    : d(other.d), buf_fd(other.buf_fd)
 {
 }

@@ -366,6 +380,7 @@ QVideoFrame::QVideoFrame(const QVideoFrame &other)
 QVideoFrame &QVideoFrame::operator =(const QVideoFrame &other)
 {
     d = other.d;
+    buf_fd = other.buf_fd;

     return *this;
 }
@@ -376,7 +391,7 @@ QVideoFrame &QVideoFrame::operator =(const QVideoFrame &other)
 bool QVideoFrame::operator==(const QVideoFrame &other) const
 {
     // Due to explicit sharing we just compare the QSharedData which in turn compares the pointers.
-    return d == other.d;
+    return (d == other.d) && (buf_fd == other.buf_fd);
 }

 /*!
@@ -384,7 +399,7 @@ bool QVideoFrame::operator==(const QVideoFrame &other) const
  */
 bool QVideoFrame::operator!=(const QVideoFrame &other) const
 {
-    return d != other.d;
+    return (d != other.d) || (buf_fd != other.buf_fd);
 }

 /*!
@@ -403,7 +418,7 @@ QVideoFrame::~QVideoFrame()
 */
 bool QVideoFrame::isValid() const
 {
-    return d->buffer != 0;
+    return d->buffer != 0 && buf_fd != -1;
 }

 /*!
@@ -415,6 +430,14 @@ QVideoFrame::PixelFormat QVideoFrame::pixelFormat() const
 }

 /*!
+    Returns the fd of buffer.
+*/
+int QVideoFrame::fd() const
+{
+    return buf_fd;
+}
+
+/*!
     Returns the type of a video frame's handle.

 */
diff --git a/src/multimedia/video/qvideoframe.h b/src/multimedia/video/qvideoframe.h
index 633604e..6030f89 100644
--- a/src/multimedia/video/qvideoframe.h
+++ b/src/multimedia/video/qvideoframe.h
@@ -104,6 +104,7 @@ public:

     QVideoFrame();
     QVideoFrame(QAbstractVideoBuffer *buffer, const QSize &size, PixelFormat format);
+    QVideoFrame(QAbstractVideoBuffer *buffer, const QSize &size, PixelFormat format, int fd);
     QVideoFrame(int bytes, const QSize &size, int bytesPerLine, PixelFormat format);
     QVideoFrame(const QImage &image);
     QVideoFrame(const QVideoFrame &other);
@@ -116,6 +117,7 @@ public:
     bool isValid() const;

     PixelFormat pixelFormat() const;
+    int fd() const;

     QAbstractVideoBuffer::HandleType handleType() const;

@@ -161,6 +163,7 @@ public:
     static QImage::Format imageFormatFromPixelFormat(PixelFormat format);

 private:
+    int buf_fd;
     QExplicitlySharedDataPointer<QVideoFramePrivate> d;
 };

--
2.7.4
