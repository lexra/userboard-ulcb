From ca6bdac7e3dce23ef872ff63ca2c470dd349e94c Mon Sep 17 00:00:00 2001
From: Huynh Thanh Hung <hung.huynh.wz@renesas.com>
Date: Tue, 29 Oct 2019 17:58:16 +0700
Subject: [PATCH 1/2] qtmultimedia: Add function to get array of fd.

Previous we only fetch 1 fd because BGRA32 format only having 1 plane.
Now we support NV12 format that contain 2 planes, so we need to get both
2 fd of them.

This patch will change as below:
+ Add constructor function for array of fd
+ Add function to get fd of each plane by input parameter
+ Remove check QVideoFrame is valid or not by FD
+ Remove compare `FD` condition of 2 QVideoFrame.
+ Fetch all fd of available plane before create new QVideoFrame

Signed-off-by: Huynh Thanh Hung <hung.huynh.wz@renesas.com>
---
 src/gsttools/qgstvideorenderersink.cpp | 15 ++++++------
 src/multimedia/video/qvideoframe.cpp   | 45 +++++++++++++++++++++++++---------
 src/multimedia/video/qvideoframe.h     |  4 ++-
 3 files changed, 44 insertions(+), 20 deletions(-)

diff --git a/src/gsttools/qgstvideorenderersink.cpp b/src/gsttools/qgstvideorenderersink.cpp
index 43e2bf6..b365ee8 100644
--- a/src/gsttools/qgstvideorenderersink.cpp
+++ b/src/gsttools/qgstvideorenderersink.cpp
@@ -84,18 +84,17 @@ void QGstDefaultVideoRenderer::stop(QAbstractVideoSurface *surface)
 
 bool QGstDefaultVideoRenderer::present(QAbstractVideoSurface *surface, GstBuffer *buffer)
 {
-    int fd;
+    int fd[3];
+    int n_mem;
     GstMemory *mem;
 
-    mem = gst_buffer_get_memory(buffer,0);
+    n_mem = gst_buffer_n_memory(buffer);
 
-    if (gst_is_dmabuf_memory(mem)){
-        fd = gst_dmabuf_memory_get_fd(mem);
+    for (int i = 0; i < n_mem; ++i)
+    {
+      mem = gst_buffer_peek_memory(buffer, i);
+      fd[i]= gst_is_dmabuf_memory(mem) ? gst_dmabuf_memory_get_fd(mem) : -1;
     }
-    else {
-        fd = -1;
-    }
-    gst_memory_unref(mem);
 
     m_flushed = false;
     QVideoFrame frame(
diff --git a/src/multimedia/video/qvideoframe.cpp b/src/multimedia/video/qvideoframe.cpp
index 24975f8..9b534f7 100644
--- a/src/multimedia/video/qvideoframe.cpp
+++ b/src/multimedia/video/qvideoframe.cpp
@@ -297,7 +297,7 @@ private:
     Constructs a null video frame.
 */
 QVideoFrame::QVideoFrame()
-    : d(new QVideoFramePrivate), buf_fd(0)
+    : d(new QVideoFramePrivate)
 {
 }
 
@@ -308,7 +308,7 @@ QVideoFrame::QVideoFrame()
 */
 QVideoFrame::QVideoFrame(
         QAbstractVideoBuffer *buffer, const QSize &size, PixelFormat format)
-    : d(new QVideoFramePrivate(size, format)),buf_fd(0)
+    : d(new QVideoFramePrivate(size, format))
 {
     d->buffer = buffer;
 }
@@ -323,7 +323,20 @@ QVideoFrame::QVideoFrame(
     : d(new QVideoFramePrivate(size, format))
 {
     d->buffer = buffer;
-    buf_fd = fd;
+    buf_fd[0] = fd;
+}
+
+/*!
+    Constructs a video frame from a \a buffer with the given pixel \a format and \a size in pixels,
+    include with array of fd for dma_buf.
+    \note This doesn't increment the reference count of the video buffer.
+*/
+QVideoFrame::QVideoFrame(
+        QAbstractVideoBuffer *buffer, const QSize &size, PixelFormat format, int fd[])
+    : d(new QVideoFramePrivate(size, format))
+{
+    d->buffer = buffer;
+    memcpy(&buf_fd, fd, sizeof(buf_fd));
 }
 
 
@@ -334,7 +347,7 @@ QVideoFrame::QVideoFrame(
     number of bytes that must be allocated for the frame.
 */
 QVideoFrame::QVideoFrame(int bytes, const QSize &size, int bytesPerLine, PixelFormat format)
-    : d(new QVideoFramePrivate(size, format)), buf_fd(0)
+    : d(new QVideoFramePrivate(size, format))
 {
     if (bytes > 0) {
         QByteArray data;
@@ -356,7 +369,7 @@ QVideoFrame::QVideoFrame(int bytes, const QSize &size, int bytesPerLine, PixelFo
 */
 QVideoFrame::QVideoFrame(const QImage &image)
     : d(new QVideoFramePrivate(
-            image.size(), pixelFormatFromImageFormat(image.format()))), buf_fd(0)
+            image.size(), pixelFormatFromImageFormat(image.format())))
 {
     if (d->pixelFormat != Format_Invalid)
         d->buffer = new QImageVideoBuffer(image);
@@ -368,8 +381,9 @@ QVideoFrame::QVideoFrame(const QImage &image)
 
 */
 QVideoFrame::QVideoFrame(const QVideoFrame &other)
-    : d(other.d), buf_fd(other.buf_fd)
+    : d(other.d)
 {
+    memcpy(&buf_fd, &other.buf_fd, sizeof(buf_fd));
 }
 
 /*!
@@ -380,7 +394,7 @@ QVideoFrame::QVideoFrame(const QVideoFrame &other)
 QVideoFrame &QVideoFrame::operator =(const QVideoFrame &other)
 {
     d = other.d;
-    buf_fd = other.buf_fd;
+    memcpy(&buf_fd, &other.buf_fd, sizeof(buf_fd));
 
     return *this;
 }
@@ -391,7 +405,7 @@ QVideoFrame &QVideoFrame::operator =(const QVideoFrame &other)
 bool QVideoFrame::operator==(const QVideoFrame &other) const
 {
     // Due to explicit sharing we just compare the QSharedData which in turn compares the pointers.
-    return (d == other.d) && (buf_fd == other.buf_fd);
+    return (d == other.d);
 }
 
 /*!
@@ -399,7 +413,7 @@ bool QVideoFrame::operator==(const QVideoFrame &other) const
  */
 bool QVideoFrame::operator!=(const QVideoFrame &other) const
 {
-    return (d != other.d) || (buf_fd != other.buf_fd);
+    return (d != other.d);
 }
 
 /*!
@@ -418,7 +432,7 @@ QVideoFrame::~QVideoFrame()
 */
 bool QVideoFrame::isValid() const
 {
-    return d->buffer != 0 && buf_fd != -1;
+    return d->buffer != 0;
 }
 
 /*!
@@ -434,10 +448,19 @@ QVideoFrame::PixelFormat QVideoFrame::pixelFormat() const
 */
 int QVideoFrame::fd() const
 {
-    return buf_fd;
+    return buf_fd[0];
 }
 
 /*!
+    Returns the fd of buffer of a plane.
+*/
+int QVideoFrame::fd(int plane) const
+{
+    return plane >= 0 && plane < d->planeCount ? buf_fd[plane] : -1 ;
+}
+
+
+/*!
     Returns the type of a video frame's handle.
 
 */
diff --git a/src/multimedia/video/qvideoframe.h b/src/multimedia/video/qvideoframe.h
index 6030f89..9d6a71b 100644
--- a/src/multimedia/video/qvideoframe.h
+++ b/src/multimedia/video/qvideoframe.h
@@ -105,6 +105,7 @@ public:
     QVideoFrame();
     QVideoFrame(QAbstractVideoBuffer *buffer, const QSize &size, PixelFormat format);
     QVideoFrame(QAbstractVideoBuffer *buffer, const QSize &size, PixelFormat format, int fd);
+    QVideoFrame(QAbstractVideoBuffer *buffer, const QSize &size, PixelFormat format, int fd[]);
     QVideoFrame(int bytes, const QSize &size, int bytesPerLine, PixelFormat format);
     QVideoFrame(const QImage &image);
     QVideoFrame(const QVideoFrame &other);
@@ -118,6 +119,7 @@ public:
 
     PixelFormat pixelFormat() const;
     int fd() const;
+    int fd(int plane) const;
 
     QAbstractVideoBuffer::HandleType handleType() const;
 
@@ -163,7 +165,7 @@ public:
     static QImage::Format imageFormatFromPixelFormat(PixelFormat format);
 
 private:
-    int buf_fd;
+    int buf_fd[3] = { 0, 0, 0};
     QExplicitlySharedDataPointer<QVideoFramePrivate> d;
 };
 
-- 
2.7.4

